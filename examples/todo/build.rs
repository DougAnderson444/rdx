#![recursion_limit = "512"]

use std::env;
use std::fs;
use std::path::PathBuf;

use html_egui_bindgen::Input;
use html_egui_bindgen::Label;
use html_egui_bindgen::*;
use html_to_egui::{Action, Handler};
use rhai::Engine;
use rhai::ParseError;

fn main() {
    let out_dir = env::var_os("OUT_DIR").unwrap_or_default();
    let rhai_filename = env::var("CARGO_PKG_NAME").unwrap() + ".rhai";
    let dest_path = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap())
        .join("src")
        .join(&rhai_filename);

    let rhai_verified = assert_rhai_compiles();

    // also write it to out_dir
    fs::write(
        PathBuf::from(out_dir).join(&rhai_filename),
        rhai_verified.clone(),
    )
    .expect("Failed to write to file");
    // put a copy in the src folder
    fs::write(
        &dest_path,
        format!(
            "/* 
AUTOGNERATED FILE DO NOT EDIT!

Type-safe source generated by build.rs
*/\n\n{}",
            rhai_verified
        ),
    )
    .expect("Failed to write to file");
    println!("cargo:rerun-if-changed=build.rs");
    // rerun if anything in the ./build folder changes
    println!("cargo:rerun-if-changed=build");
}

fn gen_script() -> String {
    let todo = Paragraph::builder().text("${todo}").build().to_string();

    let add_todos = Division::builder()
        .push(Label::builder().text("Todo List").build())
        .push(Input::builder().value("{{todo}}").build())
        .push(
            Button::new_with_func(
                Action::OnClick,
                Handler::builder()
                    .named("add-todo".to_string())
                    .args(vec!["todo".to_string()])
                    .build(),
            )
            .text("Add")
            .build(),
        )
        .build()
        .to_string();

    let list_todos = Division::builder()
        .with_rhai(format!(
            r#"
    if todos().len() > 0 {{
        // loop over get_record and display the key and optional result if it exists
        todos().map(|todo| {{
            `{todo}`
        }})
        .reduce(|acc, s| acc + s, "")

    }} else {{
        `<div>No todos yet.</div>`
    }}
"#
        ))
        .build()
        .to_string();

    format!(
        r#"render(`
{add_todos}
{list_todos}
    `)"#
    )
}

/// Compile the Rhai in advamce, give a Rustc compile error if it fails.
fn assert_rhai_compiles() -> String {
    let script = gen_script();

    let engine = Engine::new();
    match engine.compile(&script) {
        Ok(_) => (),
        Err(e) => {
            let ParseError(err_msg, position) = e;
            let line = position.line().unwrap_or(0);
            let column = position.position().unwrap_or(0);
            let error_msg = format!(
                "Rhai script compilation error at line {}, column {}: {}",
                line, column, err_msg
            );

            // If compilation fails, emit a compile-time error
            println!(
                "cargo:warning=Rhai script compilation error: {:?}",
                error_msg
            );
            panic!("Rhai script compilation failed");
        }
    }

    script
}
